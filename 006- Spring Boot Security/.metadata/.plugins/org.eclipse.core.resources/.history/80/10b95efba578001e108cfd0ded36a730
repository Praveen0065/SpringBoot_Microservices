package com.app.config6;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	// password encoder
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	
	@Autowired
	public UserDetailsService userDetailsservice;
	
	//old
		/*
		void configure(AuthenticationManagerBuilder auth) throws Exception {
			auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);
		}*/

		//new code--starts
		@Bean
		public AuthenticationManager authenticationManager(
				AuthenticationConfiguration authConfig) 
						throws Exception {
			return authConfig.getAuthenticationManager();
		}
		
		@Bean
		public DaoAuthenticationProvider authenticationProvider() {
			DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
			provider.setPasswordEncoder(passwordEncoder);
			provider.setUserDetailsService(userDetailsservice);
		      return provider;
		}
	
	
	//2. Authorization
	@Bean
	public SecurityFilterChain configAuth(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests(request -> request.antMatchers("/home","/","/user/**").permitAll()
				.antMatchers("/admin").hasAuthority("ADMIN")
				.antMatchers("/customer").hasAuthority("CUSTOMER")
				.anyRequest().authenticated()
				)
		.formLogin(
				form -> form.loginPage("/login").permitAll()
				.defaultSuccessUrl("/hello",true)
				)
		.logout(logout->logout.permitAll());
		
		return http.build();
		
	}
	
	
	
	

}
