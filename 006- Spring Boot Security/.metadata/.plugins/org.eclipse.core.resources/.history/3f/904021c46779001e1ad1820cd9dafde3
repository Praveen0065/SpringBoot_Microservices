package com.app.service5.Impl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.app.entity1.User;
import com.app.repo3.UserRepository;
import com.app.service4.IUserService;

@Service
public class UserServiceImpl implements IUserService,UserDetailsService {

	@Autowired
	private UserRepository repo;
	
	@Autowired
	private BCryptPasswordEncoder encoder;
	
	
	public Integer saveUser(User user) {
		String pwd = encoder.encode(user.getPassword());
		user.setPassword(pwd);
	 return	repo.save(user).getId();
	}


	public User findbyUser(String userName) {
	  Optional<User> opt = repo.findByUserName(userName);
	  if(opt.isPresent()) {
		  return opt.get();
	  }
		return null;
	}



	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User user = findbyUser(username);
		if(user==null) {
			throw new UsernameNotFoundException(username + "not exist");
		}
		List<GrantedAuthority> list =
		user.getRoless().stream().map(role -> new SimpleGrantedAuthority(role))
		.collect((Collectors.toList()));
		
		return new org.springframework.security.core.userdetails.User(username, user.getPassword(), list);
	}



	

}
