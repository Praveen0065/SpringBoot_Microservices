package com.app.serviceImpl4;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.app.entity1.User;
import com.app.repository2.UserRepository;
import com.app.service3.IUserService;

@Service
public class UserServiceImpl implements IUserService ,UserDetailsService {
	
	@Autowired
	public BCryptPasswordEncoder passdEnconder;
	
	@Autowired
	private UserRepository repo;

	public Integer saveUser(User user) {
		
		 String encpwd = passdEnconder.encode(user.getUserPwd());
		 user.setUserPwd(encpwd);
		 return repo.save(user).getUserId();
		 
	}

	
	public Optional<User> getOneUser(Integer id) {
		
		return repo.findById(id);
	}



	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
	   Optional<User> opt = repo.findByUserEmail(username);
	   if(opt.isEmpty()) {
		   throw new UsernameNotFoundException(username + "Not exist")
	   }
		User user = opt.get();
		List<GrantedAuthority> authorities = new ArrayList<>();
		for(String role : user.getUserRoles()) {
			authorities.add(new SimpleGrantedAuthority(role));
		}
	}








}
